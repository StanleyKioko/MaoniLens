{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { apiService } from '../components/services/api';\nimport { SAMPLE_DATA } from '../utils/constants';\nexport const useApi = (endpoint, options = {}) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    immediate = true,\n    fallbackToSample = true\n  } = options;\n  const execute = useCallback(async (...args) => {\n    try {\n      setLoading(true);\n      setError(null);\n      let result;\n      switch (endpoint) {\n        case 'sentiment':\n          result = await apiService.getSentiment(...args);\n          break;\n        case 'sentimentByTopic':\n          result = await apiService.getSentimentByTopic(...args);\n          break;\n        case 'topics':\n          result = await apiService.getTopics(...args);\n          break;\n        case 'hashtags':\n          result = await apiService.getHashtags(...args);\n          break;\n        case 'influencers':\n          result = await apiService.getInfluencers(...args);\n          break;\n        case 'fakeNews':\n          result = await apiService.getFakeNews(...args);\n          break;\n        case 'geoData':\n          result = await apiService.getGeoData(...args);\n          break;\n        default:\n          throw new Error(`Unknown endpoint: ${endpoint}`);\n      }\n      setData(result);\n      return result;\n    } catch (err) {\n      console.error(`Error in useApi for ${endpoint}:`, err);\n      setError(err.message);\n\n      // Fallback to sample data if API fails and fallback is enabled\n      if (fallbackToSample) {\n        const sampleData = getSampleData(endpoint);\n        if (sampleData) {\n          setData(sampleData);\n        }\n      }\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [endpoint, fallbackToSample]);\n  useEffect(() => {\n    if (immediate) {\n      execute();\n    }\n  }, [execute, immediate]);\n  const refetch = useCallback(() => {\n    return execute();\n  }, [execute]);\n  return {\n    data,\n    loading,\n    error,\n    execute,\n    refetch\n  };\n};\n\n// Helper function to get sample data based on endpoint\n_s(useApi, \"iYLqW/6FjqIdGtpn0QQTVtoTl00=\");\nconst getSampleData = endpoint => {\n  switch (endpoint) {\n    case 'sentiment':\n      return SAMPLE_DATA.sentiment;\n    case 'hashtags':\n      return SAMPLE_DATA.hashtags;\n    case 'topics':\n      return SAMPLE_DATA.topics;\n    case 'influencers':\n      return SAMPLE_DATA.influencers;\n    case 'sentimentByTopic':\n      return {\n        labels: ['Unga Prices', 'NHIF Reforms', 'CBC Education'],\n        Positive: [20, 40, 60],\n        Negative: [50, 30, 20],\n        Neutral: [30, 30, 20]\n      };\n    default:\n      return null;\n  }\n};\n\n// Hook for submitting feedback\nexport const useFeedback = () => {\n  _s2();\n  const [submitting, setSubmitting] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(null);\n  const submitFeedback = async feedbackData => {\n    try {\n      setSubmitting(true);\n      setError(null);\n      setSuccess(false);\n      await apiService.submitFeedback(feedbackData);\n      setSuccess(true);\n\n      // Reset success message after 3 seconds\n      setTimeout(() => setSuccess(false), 3000);\n      return true;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setSubmitting(false);\n    }\n  };\n  return {\n    submitFeedback,\n    submitting,\n    success,\n    error\n  };\n};\n\n// Hook for data export\n_s2(useFeedback, \"hd+zG61Yj6XiAMDJMAeWnaoYfNk=\");\nexport const useExport = () => {\n  _s3();\n  const [exporting, setExporting] = useState(false);\n  const [error, setError] = useState(null);\n  const exportData = async (dataType = 'hashtags') => {\n    try {\n      setExporting(true);\n      setError(null);\n      await apiService.exportData(dataType);\n      return true;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setExporting(false);\n    }\n  };\n  return {\n    exportData,\n    exporting,\n    error\n  };\n};\n_s3(useExport, \"DvxGXLKS9YFYVf9zVy7fMXAUHMQ=\");\nexport default useApi;","map":{"version":3,"names":["useState","useEffect","useCallback","apiService","SAMPLE_DATA","useApi","endpoint","options","_s","data","setData","loading","setLoading","error","setError","immediate","fallbackToSample","execute","args","result","getSentiment","getSentimentByTopic","getTopics","getHashtags","getInfluencers","getFakeNews","getGeoData","Error","err","console","message","sampleData","getSampleData","refetch","sentiment","hashtags","topics","influencers","labels","Positive","Negative","Neutral","useFeedback","_s2","submitting","setSubmitting","success","setSuccess","submitFeedback","feedbackData","setTimeout","useExport","_s3","exporting","setExporting","exportData","dataType"],"sources":["C:/Users/HP/Desktop/Folders/MaoniLens/maonibot/frontend/src/hooks/useApi.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { apiService } from '../components/services/api';\r\nimport { SAMPLE_DATA } from '../utils/constants';\r\n\r\nexport const useApi = (endpoint, options = {}) => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const { immediate = true, fallbackToSample = true } = options;\r\n\r\n  const execute = useCallback(async (...args) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      let result;\r\n      switch (endpoint) {\r\n        case 'sentiment':\r\n          result = await apiService.getSentiment(...args);\r\n          break;\r\n        case 'sentimentByTopic':\r\n          result = await apiService.getSentimentByTopic(...args);\r\n          break;\r\n        case 'topics':\r\n          result = await apiService.getTopics(...args);\r\n          break;\r\n        case 'hashtags':\r\n          result = await apiService.getHashtags(...args);\r\n          break;\r\n        case 'influencers':\r\n          result = await apiService.getInfluencers(...args);\r\n          break;\r\n        case 'fakeNews':\r\n          result = await apiService.getFakeNews(...args);\r\n          break;\r\n        case 'geoData':\r\n          result = await apiService.getGeoData(...args);\r\n          break;\r\n        default:\r\n          throw new Error(`Unknown endpoint: ${endpoint}`);\r\n      }\r\n      \r\n      setData(result);\r\n      return result;\r\n    } catch (err) {\r\n      console.error(`Error in useApi for ${endpoint}:`, err);\r\n      setError(err.message);\r\n      \r\n      // Fallback to sample data if API fails and fallback is enabled\r\n      if (fallbackToSample) {\r\n        const sampleData = getSampleData(endpoint);\r\n        if (sampleData) {\r\n          setData(sampleData);\r\n        }\r\n      }\r\n      \r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [endpoint, fallbackToSample]);\r\n\r\n  useEffect(() => {\r\n    if (immediate) {\r\n      execute();\r\n    }\r\n  }, [execute, immediate]);\r\n\r\n  const refetch = useCallback(() => {\r\n    return execute();\r\n  }, [execute]);\r\n\r\n  return {\r\n    data,\r\n    loading,\r\n    error,\r\n    execute,\r\n    refetch\r\n  };\r\n};\r\n\r\n// Helper function to get sample data based on endpoint\r\nconst getSampleData = (endpoint) => {\r\n  switch (endpoint) {\r\n    case 'sentiment':\r\n      return SAMPLE_DATA.sentiment;\r\n    case 'hashtags':\r\n      return SAMPLE_DATA.hashtags;\r\n    case 'topics':\r\n      return SAMPLE_DATA.topics;\r\n    case 'influencers':\r\n      return SAMPLE_DATA.influencers;\r\n    case 'sentimentByTopic':\r\n      return {\r\n        labels: ['Unga Prices', 'NHIF Reforms', 'CBC Education'],\r\n        Positive: [20, 40, 60],\r\n        Negative: [50, 30, 20],\r\n        Neutral: [30, 30, 20]\r\n      };\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\n// Hook for submitting feedback\r\nexport const useFeedback = () => {\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const submitFeedback = async (feedbackData) => {\r\n    try {\r\n      setSubmitting(true);\r\n      setError(null);\r\n      setSuccess(false);\r\n      \r\n      await apiService.submitFeedback(feedbackData);\r\n      setSuccess(true);\r\n      \r\n      // Reset success message after 3 seconds\r\n      setTimeout(() => setSuccess(false), 3000);\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    submitFeedback,\r\n    submitting,\r\n    success,\r\n    error\r\n  };\r\n};\r\n\r\n// Hook for data export\r\nexport const useExport = () => {\r\n  const [exporting, setExporting] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const exportData = async (dataType = 'hashtags') => {\r\n    try {\r\n      setExporting(true);\r\n      setError(null);\r\n      \r\n      await apiService.exportData(dataType);\r\n      return true;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setExporting(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    exportData,\r\n    exporting,\r\n    error\r\n  };\r\n};\r\n\r\nexport default useApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}